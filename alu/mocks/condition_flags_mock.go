// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cbush06/intel8080emulator/alu (interfaces: ConditionFlags)

// Package alu is a generated GoMock package.
package alu

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConditionFlags is a mock of ConditionFlags interface
type MockConditionFlags struct {
	ctrl     *gomock.Controller
	recorder *MockConditionFlagsMockRecorder
}

// MockConditionFlagsMockRecorder is the mock recorder for MockConditionFlags
type MockConditionFlagsMockRecorder struct {
	mock *MockConditionFlags
}

// NewMockConditionFlags creates a new mock instance
func NewMockConditionFlags(ctrl *gomock.Controller) *MockConditionFlags {
	mock := &MockConditionFlags{ctrl: ctrl}
	mock.recorder = &MockConditionFlagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConditionFlags) EXPECT() *MockConditionFlagsMockRecorder {
	return m.recorder
}

// ApplyStatusWord mocks base method
func (m *MockConditionFlags) ApplyStatusWord(arg0 byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyStatusWord", arg0)
}

// ApplyStatusWord indicates an expected call of ApplyStatusWord
func (mr *MockConditionFlagsMockRecorder) ApplyStatusWord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatusWord", reflect.TypeOf((*MockConditionFlags)(nil).ApplyStatusWord), arg0)
}

// ClearAuxillaryCarry mocks base method
func (m *MockConditionFlags) ClearAuxillaryCarry() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAuxillaryCarry")
}

// ClearAuxillaryCarry indicates an expected call of ClearAuxillaryCarry
func (mr *MockConditionFlagsMockRecorder) ClearAuxillaryCarry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAuxillaryCarry", reflect.TypeOf((*MockConditionFlags)(nil).ClearAuxillaryCarry))
}

// ClearCarry mocks base method
func (m *MockConditionFlags) ClearCarry() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearCarry")
}

// ClearCarry indicates an expected call of ClearCarry
func (mr *MockConditionFlagsMockRecorder) ClearCarry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCarry", reflect.TypeOf((*MockConditionFlags)(nil).ClearCarry))
}

// ClearFlags mocks base method
func (m *MockConditionFlags) ClearFlags() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearFlags")
}

// ClearFlags indicates an expected call of ClearFlags
func (mr *MockConditionFlagsMockRecorder) ClearFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFlags", reflect.TypeOf((*MockConditionFlags)(nil).ClearFlags))
}

// ClearParity mocks base method
func (m *MockConditionFlags) ClearParity() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearParity")
}

// ClearParity indicates an expected call of ClearParity
func (mr *MockConditionFlagsMockRecorder) ClearParity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearParity", reflect.TypeOf((*MockConditionFlags)(nil).ClearParity))
}

// ClearSign mocks base method
func (m *MockConditionFlags) ClearSign() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSign")
}

// ClearSign indicates an expected call of ClearSign
func (mr *MockConditionFlagsMockRecorder) ClearSign() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSign", reflect.TypeOf((*MockConditionFlags)(nil).ClearSign))
}

// ClearZero mocks base method
func (m *MockConditionFlags) ClearZero() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearZero")
}

// ClearZero indicates an expected call of ClearZero
func (mr *MockConditionFlagsMockRecorder) ClearZero() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearZero", reflect.TypeOf((*MockConditionFlags)(nil).ClearZero))
}

// CreateStatusWord mocks base method
func (m *MockConditionFlags) CreateStatusWord() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatusWord")
	ret0, _ := ret[0].(byte)
	return ret0
}

// CreateStatusWord indicates an expected call of CreateStatusWord
func (mr *MockConditionFlagsMockRecorder) CreateStatusWord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatusWord", reflect.TypeOf((*MockConditionFlags)(nil).CreateStatusWord))
}

// IsAuxillaryCarry mocks base method
func (m *MockConditionFlags) IsAuxillaryCarry() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuxillaryCarry")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuxillaryCarry indicates an expected call of IsAuxillaryCarry
func (mr *MockConditionFlagsMockRecorder) IsAuxillaryCarry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuxillaryCarry", reflect.TypeOf((*MockConditionFlags)(nil).IsAuxillaryCarry))
}

// IsCarry mocks base method
func (m *MockConditionFlags) IsCarry() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCarry")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCarry indicates an expected call of IsCarry
func (mr *MockConditionFlagsMockRecorder) IsCarry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCarry", reflect.TypeOf((*MockConditionFlags)(nil).IsCarry))
}

// IsParity mocks base method
func (m *MockConditionFlags) IsParity() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsParity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsParity indicates an expected call of IsParity
func (mr *MockConditionFlagsMockRecorder) IsParity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsParity", reflect.TypeOf((*MockConditionFlags)(nil).IsParity))
}

// IsSign mocks base method
func (m *MockConditionFlags) IsSign() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSign")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSign indicates an expected call of IsSign
func (mr *MockConditionFlagsMockRecorder) IsSign() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSign", reflect.TypeOf((*MockConditionFlags)(nil).IsSign))
}

// IsZero mocks base method
func (m *MockConditionFlags) IsZero() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsZero")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsZero indicates an expected call of IsZero
func (mr *MockConditionFlagsMockRecorder) IsZero() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsZero", reflect.TypeOf((*MockConditionFlags)(nil).IsZero))
}

// SetAuxillaryCarry mocks base method
func (m *MockConditionFlags) SetAuxillaryCarry() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuxillaryCarry")
}

// SetAuxillaryCarry indicates an expected call of SetAuxillaryCarry
func (mr *MockConditionFlagsMockRecorder) SetAuxillaryCarry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuxillaryCarry", reflect.TypeOf((*MockConditionFlags)(nil).SetAuxillaryCarry))
}

// SetCarry mocks base method
func (m *MockConditionFlags) SetCarry() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCarry")
}

// SetCarry indicates an expected call of SetCarry
func (mr *MockConditionFlagsMockRecorder) SetCarry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCarry", reflect.TypeOf((*MockConditionFlags)(nil).SetCarry))
}

// SetParity mocks base method
func (m *MockConditionFlags) SetParity() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParity")
}

// SetParity indicates an expected call of SetParity
func (mr *MockConditionFlagsMockRecorder) SetParity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParity", reflect.TypeOf((*MockConditionFlags)(nil).SetParity))
}

// SetSign mocks base method
func (m *MockConditionFlags) SetSign() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSign")
}

// SetSign indicates an expected call of SetSign
func (mr *MockConditionFlagsMockRecorder) SetSign() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSign", reflect.TypeOf((*MockConditionFlags)(nil).SetSign))
}

// SetZero mocks base method
func (m *MockConditionFlags) SetZero() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetZero")
}

// SetZero indicates an expected call of SetZero
func (mr *MockConditionFlagsMockRecorder) SetZero() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZero", reflect.TypeOf((*MockConditionFlags)(nil).SetZero))
}

// UpdateAuxillaryCarry mocks base method
func (m *MockConditionFlags) UpdateAuxillaryCarry(arg0, arg1 byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuxillaryCarry", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateAuxillaryCarry indicates an expected call of UpdateAuxillaryCarry
func (mr *MockConditionFlagsMockRecorder) UpdateAuxillaryCarry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuxillaryCarry", reflect.TypeOf((*MockConditionFlags)(nil).UpdateAuxillaryCarry), arg0, arg1)
}

// UpdateCarry mocks base method
func (m *MockConditionFlags) UpdateCarry(arg0, arg1 byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarry", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateCarry indicates an expected call of UpdateCarry
func (mr *MockConditionFlagsMockRecorder) UpdateCarry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarry", reflect.TypeOf((*MockConditionFlags)(nil).UpdateCarry), arg0, arg1)
}

// UpdateCarryDoublePrecision mocks base method
func (m *MockConditionFlags) UpdateCarryDoublePrecision(arg0, arg1 uint16) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarryDoublePrecision", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateCarryDoublePrecision indicates an expected call of UpdateCarryDoublePrecision
func (mr *MockConditionFlagsMockRecorder) UpdateCarryDoublePrecision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarryDoublePrecision", reflect.TypeOf((*MockConditionFlags)(nil).UpdateCarryDoublePrecision), arg0, arg1)
}

// UpdateParity mocks base method
func (m *MockConditionFlags) UpdateParity(arg0 byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParity", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateParity indicates an expected call of UpdateParity
func (mr *MockConditionFlagsMockRecorder) UpdateParity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParity", reflect.TypeOf((*MockConditionFlags)(nil).UpdateParity), arg0)
}

// UpdateSign mocks base method
func (m *MockConditionFlags) UpdateSign(arg0 byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSign", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateSign indicates an expected call of UpdateSign
func (mr *MockConditionFlagsMockRecorder) UpdateSign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSign", reflect.TypeOf((*MockConditionFlags)(nil).UpdateSign), arg0)
}

// UpdateZero mocks base method
func (m *MockConditionFlags) UpdateZero(arg0 byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateZero", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateZero indicates an expected call of UpdateZero
func (mr *MockConditionFlagsMockRecorder) UpdateZero(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateZero", reflect.TypeOf((*MockConditionFlags)(nil).UpdateZero), arg0)
}
